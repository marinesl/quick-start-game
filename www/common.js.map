{"version":3,"sources":["webpack:///./src/app/services/score/score-service.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA;;EAEE;AAC0C;AACoB;AACC;AACjE,EAAE;AAGF;;EAEE;AAED;IAEC,kCAAkC;IAClC,sBAAqB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;IAAG,CAAC;IAAA,CAAC;IAEhD,6BAA6B;IACtB,2BAAI,GAAX,UAAY,KAAK;QAChB,aAAa;QACb,IAAI,QAAQ,GAAG,IAAI,gEAAW,EAAE,CAAC;QACjC,QAAQ,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;QAEpD,qBAAqB;QACrB,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAI,qEAAW,CAAC,MAAM,gBAAa,EAAE,EAAE,KAAK,SAAE,EAAE,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC;aAChG,SAAS,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACzD,CAAC;IAAA,CAAC;IAEF,0BAA0B;IACnB,gCAAS,GAAhB;QACC,gBAAgB;QAChB,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAI,qEAAW,CAAC,MAAM,WAAQ,CAAC;aACxD,SAAS,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACzD,CAAC;IAAA,CAAC;IAIF,uBAAuB;IACf,8BAAO,GAAf,UAAgB,GAAQ;QACvB,OAAO,GAAG,IAAI,EAAE,CAAC;IAClB,CAAC;IAAA,CAAC;IAEF,oBAAoB;IACZ,kCAAW,GAAnB,UAAoB,GAAQ;QAC3B,OAAO,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC;IAAA,CAAC;IAjCU,YAAY;QADxB,gEAAU,EAAE;+EAIqB,+DAAU;OAH/B,YAAY,CAkCxB;IAAD,mBAAC;CAAA;AAlCwB;AAkCxB,CAAC;AACH,EAAE","file":"common.js","sourcesContent":["/* \nImports \n*/\n\timport { Injectable } from '@angular/core';\n\timport { HttpClient, HttpHeaders } from '@angular/common/http';\n\timport { environment } from \"../../../environments/environment\";\n//\n\n\n/* \nDefinition \n*/\n\t@Injectable()\n\texport class ScoreService {\n\n\t\t// Inject module(s) in the service\n\t\tconstructor( private HttpClient: HttpClient ){};\n\t\t\n\t\t// Function to save the score\n\t\tpublic save(score): Promise<any>{\n\t\t\t// Set header\n\t\t\tlet myHeader = new HttpHeaders();\n\t\t\tmyHeader.append('Content-Type', 'application/json');\n\n\t\t\t// POST '/score/save'\n\t\t\treturn this.HttpClient.post(`${environment.apiUrl}/score/save`, { score }, { headers: myHeader })\n\t\t\t.toPromise().then(this.getData).catch(this.handleError);\n\t\t};\n\n\t\t// Function get all scores\n\t\tpublic getScores(): Promise<any>{\n\t\t\t// POST '/score'\n\t\t\treturn this.HttpClient.get(`${environment.apiUrl}/score`)\n\t\t\t.toPromise().then(this.getData).catch(this.handleError);\n\t\t};\n\n    \n\n\t\t// Get the API response\n\t\tprivate getData(res: any){\n\t\t\treturn res || {};\n\t\t};\n\n\t\t// Get the API error\n\t\tprivate handleError(err: any){\n\t\t\treturn Promise.reject(err.error);\n\t\t};\n\t};\n//"],"sourceRoot":""}