{"version":3,"sources":["webpack:///./src/app/routes/tap-page/module.ts","webpack:///./src/app/routes/tap-page/router.ts","webpack:///./src/app/routes/tap-page/tap-page.component.html","webpack:///./src/app/routes/tap-page/tap-page.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;EAEE;AACE,UAAU;AAC+B;AACM;AAE/C,QAAQ;AAC2B;AACqB;AAC5D,EAAE;AAGF;;EAEE;AAcE;IANJ,EAAE;IAGF;;MAEE;IACE;IAAqB,CAAC;IAAT,MAAM;QAblB,8DAAQ,CAAC;YACN,YAAY,EAAE,CAAE,oEAAgB,CAAE;YAClC,OAAO,EAAE;gBACL,4DAAY;gBACZ,+CAAO;aACV;SACJ,CAAC;QACN,EAAE;QAGF;;UAEE;OACe,MAAM,CAAG;IAAD,aAAC;CAAA;AAAH;AAAG,CAAC;AAC3B,EAAE;;;;;;;;;;;;;AC1BE;AAAA;AAAA;AAAA;AAAuD;AACC;AAC5D,EAAE;AAGF;;EAEE;AACE,IAAM,KAAK,GAAW;IAClB;QACI,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,oEAAgB;KAC9B;CACJ,CAAC;AACN,EAAE;AAGF;;EAEE;AACS,IAAM,OAAO,GAAwB,4DAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AAC7E,EAAE;;;;;;;;;;;;ACzBF,mFAAmF,kGAAkG,eAAe,QAAQ,4BAA4B,GAAG,2BAA2B,KAAK,gCAAgC,KAAK,2BAA2B,6IAA6I,uB;;;;;;;;;;;;;;;;;;;ACAxd;;EAEE;AACE,UAAU;AACwC;AAElD,QAAQ;AAC+D;AACG;AAI1E,aAAa;AAYhB;IAIC;;MAEE;IACD,mBAAmB;IACnB,0BACS,YAA0B;QADnC,iBAEI;QADK,iBAAY,GAAZ,YAAY,CAAc;QAP7B,cAAS,GAAO,EAAE,EAAC,0BAA0B;QASpD,EAAE;QAGF;;UAEE;QACD,iBAAiB;QACV,WAAM,GAAG;YACf,iBAAiB;YACjB,KAAI,CAAC,YAAY,CAAC,SAAS,EAAE;iBAC5B,IAAI,CAAE,UAAC,WAA6B;gBACpC,KAAI,CAAC,SAAS,GAAG,WAAW,CAAC,IAAI;YAClC,CAAC,CAAC;iBACD,KAAK,CAAE,UAAC,WAA6B;gBACrC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC;YACzB,CAAC,CAAC;QACH,CAAC,CAAC;IAjBC,CAAC;IAAA,CAAC;IAkBN,EAAE;IAGF;;MAEE;IACD,mCAAQ,GAAR;QACC,IAAI,CAAC,MAAM,EAAE;IACd,CAAC;IAAA,CAAC;IApCS,gBAAgB;QAXzB,+DAAS,CAAC;YACZ,QAAQ,EAAE,cAAc;YACxB,mHAAwC;YACxC,SAAS,EAAE,CAAE,+EAAW,EAAG,kFAAY,CAAE;SACvC,CAAC;QACN,EAAE;QAGF;;UAEE;;+EAUwB,kFAAY;OATxB,gBAAgB,CAsC5B;IAAD,uBAAC;CAAA;AAtC4B;AAsC5B,CAAC;AACH,EAAE","file":"routes-tap-page-module.js","sourcesContent":["/* \nImports \n*/\n    // Angular\n    import { NgModule } from '@angular/core';\n    import { CommonModule } from '@angular/common';\n\n    // Inner\n    import { Routing } from './router';\n    import { TapPageComponent } from './tap-page.component';\n//\n\n\n/* \nDefinition \n*/\n    @NgModule({\n        declarations: [ TapPageComponent ],\n        imports: [ \n            CommonModule, \n            Routing,\n        ]\n    })\n//\n\n\n/* \nExport \n*/\n    export class Module {};\n//","/* \nImports \n*/\n    import { ModuleWithProviders } from '@angular/core';\n    import { Routes, RouterModule } from '@angular/router';\n    import { TapPageComponent } from './tap-page.component';\n//\n\n\n/* \nDefinition \n*/\n    const route: Routes = [\n        {\n            path: '',\n            component: TapPageComponent\n        }\n    ];\n//\n\n\n/* \nExport \n*/\n    export const Routing: ModuleWithProviders = RouterModule.forChild(route);\n//","module.exports = \"<!-- If there are scores -->\\n<div *ngIf=\\\"allScores.length != 0; else scoreEmpty\\\">\\n    <ul>\\n        <div *ngFor=\\\"let score of allScores\\\">\\n            <li>{{ score.score }}pts - {{ score.user_id.first_name }} {{ score.user_id.last_name }} / {{ score.date|date:'dd/MM/yyyy' }} - {{ score.date|date:'H:m:s' }}</li>\\n        </div>\\n    </ul>\\n</div>\\n\\n<!-- If score empty -->\\n<ng-template #scoreEmpty>\\n    <p>Pour avoir des scores, il faut jouer ;-)</p>\\n</ng-template>\"","/* \nImports & definition \n*/\n    // Imports\n    import { Component, OnInit } from '@angular/core';\n\n    // Inner\n    import { AuthService } from \"../../services/auth/auth-service.service\";\n    import { ScoreService } from \"../../services/score/score-service.service\";\n\t\timport { ApiResponseModel } from \"../../models/api.reponse.model\";\n\n\n    // Definition\n    @Component({\n\t\t\tselector: 'app-tap-page',\n\t\t\ttemplateUrl: './tap-page.component.html',\n\t\t\tproviders: [ AuthService , ScoreService ]\n    })\n//\n\n\n/* \nExport\n*/\n\texport class TapPageComponent implements OnInit {\n\n\t\tpublic allScores: [] = [] // Array of all the scores\n\n\t\t/* \n\t\tConfig.\n\t\t*/\n\t\t\t// Module injection\n\t\t\tconstructor(\n\t\t\t\tprivate ScoreService: ScoreService\n\t\t\t) {};\n\t\t//\n\n\n\t\t/*\n\t\tMethods\n\t\t*/\n\t\t\t// Get all scores\n\t\t\tpublic scores = () => {\n\t\t\t\t// Send user data\n\t\t\t\tthis.ScoreService.getScores()\n\t\t\t\t.then( (apiResponse: ApiResponseModel) => {\n\t\t\t\t\tthis.allScores = apiResponse.data\n\t\t\t\t})\n\t\t\t\t.catch( (apiResponse: ApiResponseModel) => {\n\t\t\t\t\tconsole.log(apiResponse)\n\t\t\t\t})\n\t\t\t};\n\t\t//\n\n\n\t\t/* \n\t\tHooks\n\t\t*/\n\t\t\tngOnInit() { \n\t\t\t\tthis.scores()\n\t\t\t};\n\t\t//\n\t};\n//"],"sourceRoot":""}